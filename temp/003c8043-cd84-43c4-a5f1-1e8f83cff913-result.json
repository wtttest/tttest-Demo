{"name": "用例标题", "status": "broken", "statusDetails": {"message": "airtest.core.error.NoDeviceError: 'No devices added.'", "trace": "args = (), kwargs = {}\nscript_path = 'E:\\\\study\\\\daima\\\\tttest\\\\tttest_demo\\\\tttest-demo\\\\testcases\\\\webui\\\\webui_cases'\nfile_names = 'test_006.py', name = 'test_006', ext = '.py'\nnew_dir = 'log\\\\test_006'\nh1 = <airtest.report.report.LogToHtml object at 0x000001B96FD6F010>\n\n    def inner(*args, **kwargs):\n        script_path = os.path.dirname(func.__code__.co_filename)\n        file_names = os.path.basename(func.__code__.co_filename)\n        name, ext = os.path.splitext(file_names)\n        new_dir = os.path.join('log', name)\n        only_set_logdir(new_dir)\n        try:\n>           args = func(*args, **kwargs)\n\nutils\\case_fromework.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntestcases\\webui\\webui_cases\\test_006.py:19: in test_006\n    wd.find_element(By.CSS_SELECTOR, '[aria-label=\"python基础\"]').click()\nE:\\TtTest\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:830: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nE:\\TtTest\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B96FCED350>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x76647BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77C1BD2B+107]\\\\n\\\\tRtlClearBits [0x77C1BCAF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[aria-label=\"python基础\"]\"}\nE         (Session info: chrome=119.0.6045.200)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x008E72A3+45731]\nE       \t(No symbol) [0x00872D51]\nE       \t(No symbol) [0x0076880D]\nE       \t(No symbol) [0x0079B940]\nE       \t(No symbol) [0x0079BE0B]\nE       \t(No symbol) [0x007CD1F2]\nE       \t(No symbol) [0x007B8024]\nE       \t(No symbol) [0x007CB7A2]\nE       \t(No symbol) [0x007B7DD6]\nE       \t(No symbol) [0x007931F6]\nE       \t(No symbol) [0x0079439D]\nE       \tGetHandleVerifier [0x00BF0716+3229462]\nE       \tGetHandleVerifier [0x00C384C8+3523784]\nE       \tGetHandleVerifier [0x00C3214C+3498316]\nE       \tGetHandleVerifier [0x00971680+611968]\nE       \t(No symbol) [0x0087CCCC]\nE       \t(No symbol) [0x00878DF8]\nE       \t(No symbol) [0x00878F1D]\nE       \t(No symbol) [0x0086B2C7]\nE       \tBaseThreadInitThunk [0x76647BA9+25]\nE       \tRtlInitializeExceptionChain [0x77C1BD2B+107]\nE       \tRtlClearBits [0x77C1BCAF+191]\n\nE:\\TtTest\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nargs = (), kwargs = {}\nscript_path = 'E:\\\\study\\\\daima\\\\tttest\\\\tttest_demo\\\\tttest-demo\\\\testcases\\\\webui\\\\webui_cases'\nfile_names = 'test_006.py', name = 'test_006', ext = '.py'\nnew_dir = 'log\\\\test_006'\nh1 = <airtest.report.report.LogToHtml object at 0x000001B96FD6F010>\n\n    def inner(*args, **kwargs):\n        script_path = os.path.dirname(func.__code__.co_filename)\n        file_names = os.path.basename(func.__code__.co_filename)\n        name, ext = os.path.splitext(file_names)\n        new_dir = os.path.join('log', name)\n        only_set_logdir(new_dir)\n        try:\n            args = func(*args, **kwargs)\n    \n        except Exception as e:\n            print(e)\n>           log(e, desc='异常信息', snapshot=True)\n\nutils\\case_fromework.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nE:\\TtTest\\Lib\\site-packages\\airtest\\core\\helper.py:119: in log\n    try_log_screen(depth=2)\nE:\\TtTest\\Lib\\site-packages\\airtest\\utils\\logwraper.py:124: in wrapper\n    res = f(*args, **kwargs)\nE:\\TtTest\\Lib\\site-packages\\airtest\\core\\cv.py:106: in try_log_screen\n    screen = G.DEVICE.snapshot(quality=quality)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'airtest.core.helper.G'>\n\n    @property\n    def DEVICE(cls):\n        if G._DEVICE is None:\n>           raise NoDeviceError(\"No devices added.\")\nE           airtest.core.error.NoDeviceError: 'No devices added.'\n\nE:\\TtTest\\Lib\\site-packages\\airtest\\core\\helper.py:19: NoDeviceError"}, "description": "用例描述", "attachments": [{"name": "log", "source": "6df92990-6adb-4a63-bc77-91b3e5b7a341-attachment.txt", "type": "text/plain"}], "start": 1701612520485, "stop": 1701612520649, "uuid": "aab17e99-d3d2-4411-ac6d-2274b02218ba", "historyId": "1195d53a97e34aa056a337ea60073f46", "testCaseId": "1195d53a97e34aa056a337ea60073f46", "fullName": "testcases.webui.webui_cases.test_006#test_006", "labels": [{"name": "severity", "value": "blocker：阻塞缺陷（功能未实现，无法下一步）critical：严重缺陷（功能点缺失）normal：一般缺陷（边界情况，格式错误）minor：次要缺陷（界面错误与ui需求不符）trivial：轻微缺陷（必须项无提示，或者提示不规范）"}, {"name": "story", "value": "场景，相当于method级的标签"}, {"name": "feature", "value": "功能点的描述，相当于class级的标签"}, {"name": "parentSuite", "value": "testcases.webui.webui_cases"}, {"name": "suite", "value": "test_006"}, {"name": "host", "value": "T"}, {"name": "thread", "value": "21460-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.webui.webui_cases.test_006"}]}